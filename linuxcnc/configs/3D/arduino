#!/usr/bin/python

import termctl
import hal
import sys
import time

sys.stdout = open("/tmp/arduino.log", "w")

PORT = "/dev/ttyUSB0"

if len(sys.argv) > 1:
    PORT = sys.argv[1]

c = hal.component("arduino")

c.newpin("temp-in-extruder", hal.HAL_FLOAT, hal.HAL_OUT)
c.newpin("temp-out-extruder", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("temp-in-bed", hal.HAL_FLOAT, hal.HAL_OUT)
c.newpin("temp-out-bed", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("fan-out", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("fail", hal.HAL_BIT, hal.HAL_OUT)

c.ready()

ctl = termctl.TemperatureControl(PORT)
time.sleep(5)

if len(sys.argv) >= 4:
    ctl.set_beta25(termctl.HOTEND_EXTRUDER, int(sys.argv[2]))
    ctl.set_beta25(termctl.HOTEND_BED, int(sys.argv[3]))

#ctl.set_tuning(termctl.HOTEND_EXTRUDER, 20.0, 0.3, 2.6)
#ctl.set_tuning(termctl.HOTEND_EXTRUDER, 20.0, 0.31, 3.5)
##ctl.set_tuning(termctl.HOTEND_EXTRUDER, 30.0, 0.30, 5.0)

try:
    while 1:
        try:
            # Get temperature
            info_temp = ctl.get_temp(termctl.HOTEND_EXTRUDER)
            print(info_temp)
            if info_temp is not None:
                c['fail'] = 0
                c['temp-in-extruder'] = int(info_temp['extruder'])
                c['temp-in-bed'] = int(info_temp['hotbed'])
            else:
                c['fail'] = 1
                print "Got None temperature"
            # Set temperature
            ctl.set_temperature(termctl.HOTEND_EXTRUDER, int(c['temp-out-extruder']))
            ctl.set_temperature(termctl.HOTEND_BED, int(c['temp-out-bed']))
            ctl.set_fan(0, int(c['fan-out']))
            #ctl.set_temperature(termctl.HOTEND_EXTRUDER, 0)
            #ctl.set_temperature(termctl.HOTEND_BED, 0)
            #ctl.set_fan(0, 0)
            time.sleep(.5)
        except (KeyboardInterrupt,):
            raise SystemExit, 0
        except:
            c['fail'] = 1
            print "Unknown exeption. Reconnecting..."
            is_ok = False
            ctl.close()
            ctl = None
            while not is_ok:
                try:
                    ctl = termctl.TemperatureControl(PORT)
                    is_ok = True
                except:
                    print "Reconnection failed... try again"
                    time.sleep(0.5)
            time.sleep(3)
            print "Reconnected!"
except (KeyboardInterrupt,):
    raise SystemExit, 0
