#!/usr/bin/python

import Tkinter
import ConfigParser
import os
import math
import sys
import tkFileDialog
from PIL import Image
from PIL import ImageTk

VERSION = "1.0"


class LaserPWM:
    """
    Control PWM based Laser
    """

    def __init__(self):
        pass

    @staticmethod
    def off():
        return "M68 E0 Q0"

    @staticmethod
    def fire(pixel):
        return "M67 E0 Q%d" % pixel


class LaserTTL:
    """
    Control TTL based Laser
    """

    def __init__(self):
        pass

    @staticmethod
    def off():
        return "M65 P0"

    @staticmethod
    def fire(pixel):
        if pixel == 0:
            return "M63 P0"
        else:
            return "M62 P0"


def img_to_array(img, point_size, margins, dc_min, dc_max, pwm):
    width, height = img.size

    colors = []
    direction = 1
    for x in range(0, width, 1):
        x_data = {
            "x": float(x - width / 2) * point_size,
            "colors": []
        }
        add = False
        last_nonzero_pixel = -1
        for y in range(0, height, 1):
            pixel = 255 - img.getpixel((x, height - y - 1))
            if pwm:
                pixel = dc_min + int(float(pixel) * (float(dc_max) - float(dc_min)) / 255.0)
            if len(x_data["colors"]) > 0 and x_data["colors"][-1]["pixel"] == pixel:
                x_data["colors"][-1]["len"] += direction * point_size
            else:
                if len(x_data["colors"]) > 0 or pixel != 0:
                    x_data["colors"].append({
                        "y": float(y - height / 2) * point_size,
                        "len": direction * point_size,
                        "pixel": pixel
                    })
                    if pixel != 0:
                        last_nonzero_pixel = len(x_data["colors"]) - 1
            if not add and pixel != 0:
                add = True
        if add:
            if last_nonzero_pixel < len(x_data["colors"]) - 1:
                x_data["colors"] = x_data["colors"][:-(len(x_data["colors"]) - last_nonzero_pixel - 1)]
            # append margin at start
            x_data["colors"].insert(0, {
                "y": x_data["colors"][0]["y"] - margins,
                "len": direction * margins,
                "pixel": 0
            })
            # append margin at end
            x_data["colors"].append({
                "y": x_data["colors"][-1]["y"] + math.fabs(x_data["colors"][-1]["len"]),
                "len": direction * margins,
                "pixel": 0
            })

            # reverse every two lines
            if direction == -1:
                x_data["colors"] = list(reversed(x_data["colors"]))
                direction = 1
            else:
                direction = -1
            colors.append(x_data)

    return colors


def get_y_pos(y_data):
    if y_data["len"] > 0:
        start = float(y_data["y"])
        end = float(y_data["y"]) + float(y_data["len"])
    else:
        start = float(y_data["y"]) - float(y_data["len"])
        end = float(y_data["y"])

    return start, end


def convert(img, point_size, feed, margins, pwm, dc_min, dc_max):
    if pwm:
        gcode = LaserPWM()
    else:
        gcode = LaserTTL()

    colors = img_to_array(img, point_size, margins, dc_min, dc_max, pwm)

    print ("G21\nG61\nG64")
    print gcode.off()
    print ("M3 S1")
    print ("G1 F%d" % feed)

    need_g0 = True
    for x_data in colors:
        x_pos = float(x_data["x"])
        new_line = True
        for y_data in x_data["colors"]:
            y_start, y_end = get_y_pos(y_data)
            if need_g0:
                print "G0 X%.3f Y%.3f" % (x_pos, y_start)
                need_g0 = False
            elif new_line:
                print gcode.off()
                print "G1 X%.3f Y%.3f" % (x_pos, y_start)
            new_line = False
            print gcode.fire(y_data["pixel"])
            print "G1 Y%.3f" % y_end

    print gcode.off()
    print ("M5")
    print ("G0 X0 Y0")
    print ("M2")


class UI:

    def __init__(self, title):
        self.top = Tkinter.Tk()
        self.top.title(title)
        self.result = False
        self.validations = {
            "validate_double": self.top.register(self.validate_double),
            "validate_int": self.top.register(self.validate_int),
        }
        self.variables = {}
        self.widgets = {}

    def register_validator(self, name, func):
        self.validations[name] = self.top.register(func)

    def add_widget(self, data, name=None, root=None):
        args = data.get('args', {})
        # create variable
        if 'variable_key' in data.keys():
            v = data['variable']()
            if "variable_default" in data.keys():
                v.set(data['variable_default'])

            args[data['variable_key']] = v
            self.variables[name] = v

        # create validation
        if 'validate' in data.keys():
            args['validate'] = data['validate']
            args['validatecommand'] = self.validations[data['validate_function']] + ' %P'

        # set master parameter
        if root is None:
            args['master'] = self.top
        else:
            args['master'] = root

        # create widget
        w = data['widget'](**args)

        # set widget configuration
        if 'config' in data.keys():
            for key, value in data['config'].items():
                w[key] = value

        # set widget packing
        if 'pack' in data.keys():
            getattr(w, data['pack']['type'])(**data['pack']['args'])

        if name is not None:
            self.widgets[name] = w

        return w

    @staticmethod
    def validate_double(new_string):
        if new_string == "":
            new_string = "0.0"
        try:
            v = float(new_string)
            return True
            # True tells Tkinter to accept the new string
        except ValueError:
            return False
            # False means don't accept it

    @staticmethod
    def validate_int(new_string):
        if new_string == "":
            new_string = "0"
        try:
            v = int(new_string)
            return True
            # True tells Tkinter to accept the new string
        except ValueError:
            return False
            # False means don't accept it

    def on_ok(self):
        self.result = True
        self.top.destroy()

    def on_cancel(self):
        self.result = False
        self.top.destroy()

    def load_values(self, file_path):
        if os.path.exists(file_path):
            config = ConfigParser.RawConfigParser()
            config.read(file_path)
            for name, val in self.variables.items():
                try:
                    val.set(config.get("values", name))
                except:
                    pass

    def save_values(self, file_path):
        config = ConfigParser.RawConfigParser()
        config.add_section('values')
        for name, val in self.variables.items():
            try:
                config.set("values", name, val.get())
            except:
                pass
        with open(file_path, "wt") as fp:
            config.write(fp)

    def mainloop(self):
        self.top.mainloop()
        return self.result

    def get_values(self):
        ret = {}
        for key, val in self.variables.items():
            ret[key] = val.get()
        return ret


def change_brightness(img, level):
    factor = float(100 - level) / 100.0

    def brightness(c):
        if factor >= 0:
            out = 255 * (1.0 - factor) + c * factor
        else:
            out = c * factor
        return max(0, min(255, out))

    return img.point(brightness)


def enhance_image(img, contrast, brightness, pwm, mode):
    new_img = img
    if contrast != 0:
        new_img = change_contrast(new_img, contrast)
    if brightness != 0:
        new_img = change_brightness(new_img, brightness)

    updated_mode = mode
    if mode == "Grayscale" and not pwm:
        updated_mode = "B&W Dither"

    if updated_mode == "B&W":
        new_img = new_img.convert("1", dither=Image.NONE)
    elif updated_mode == "B&W Dither":
        new_img = new_img.convert("1", dither=Image.FLOYDSTEINBERG)

    return new_img


class RasterToGcodeUI(UI):

    def __init__(self, src_image):
        UI.__init__(self, "Image to laser gcode")
        self.ignore_changes = False
        self.src_image = src_image
        self.img_aspect_ratio = 1
        self.image_width = 0
        self.image_height = 0
        self.create_layout()

    def reset_contrast(self):
        self.variables['contrast'].set(False)

    def reset_brightness(self):
        self.variables['brightness'].set(False)

    def trace_width(self, *args):
        if not self.variables['not_resize'].get():
            if self.variables['keep_ar'].get() and not self.ignore_changes:
                self.ignore_changes = True
                try:
                    new_height = int(float(self.variables['width'].get()) / self.img_aspect_ratio)
                    self.variables['height'].set(new_height)
                except:
                    pass
                self.ignore_changes = False

    def trace_height(self, *args):
        if not self.variables['not_resize'].get():
            if self.variables['keep_ar'].get() and not self.ignore_changes:
                self.ignore_changes = True
                try:
                    new_width = int(float(vars['height'].get()) * self.img_aspect_ratio)
                    self.variables['width'].set(new_width)
                except:
                    pass
                self.ignore_changes = False

    def trace_image(self, *args):
        try:
            new_img = enhance_image(self.src_image,
                                    self.variables['contrast'].get(),
                                    self.variables['brightness'].get(),
                                    self.variables['pwm'].get(),
                                    self.variables['mode'].get())
            new_img = ImageTk.PhotoImage(new_img, master=self.top)
            self.widgets['image'].configure(image=new_img)
            self.widgets['image'].image = new_img
        except Exception:
            pass

    def trace_aspect_ratio(self, *args):
        if self.variables['keep_ar'].get():
            self.trace_width()

    def trace_point_size(self, *args):
        if self.variables['not_resize'].get():
            self.ignore_changes = True

            self.variables['width'].set(self.image_width * self.variables['point_size'].get())
            self.variables['height'].set(self.image_height * self.variables['point_size'].get())

            self.ignore_changes = False

    def trace_resize(self, *args):
        if self.variables['not_resize'].get():
            self.widgets['keep_ar'].config(state=Tkinter.DISABLED)
            self.widgets['width'].config(state=Tkinter.DISABLED)
            self.widgets['height'].config(state=Tkinter.DISABLED)
            self.widgets['width_l'].config(state=Tkinter.DISABLED)
            self.widgets['height_l'].config(state=Tkinter.DISABLED)

            self.ignore_changes = True

            self.variables['width'].set(self.image_width * self.variables['point_size'].get())
            self.variables['height'].set(self.image_height * self.variables['point_size'].get())

            self.ignore_changes = False
        else:
            self.widgets['keep_ar'].config(state=Tkinter.NORMAL)
            self.widgets['width'].config(state=Tkinter.NORMAL)
            self.widgets['height'].config(state=Tkinter.NORMAL)
            self.widgets['width_l'].config(state=Tkinter.NORMAL)
            self.widgets['height_l'].config(state=Tkinter.NORMAL)

    def _setup_traces(self):
        self.variables['contrast'].trace('w', self.trace_image)
        self.variables['brightness'].trace('w', self.trace_image)
        self.variables['pwm'].trace('w', self.trace_image)
        self.variables['mode'].trace('w', self.trace_image)
        self.variables['width'].trace('w', self.trace_width)
        self.variables['height'].trace('w', self.trace_height)
        self.variables['keep_ar'].trace('w', self.trace_aspect_ratio)
        self.variables['not_resize'].trace('w', self.trace_resize)
        self.variables['point_size'].trace('w', self.trace_point_size)

    @staticmethod
    def define_label(text, row, column, columnspan=1):
        return {
            "widget": Tkinter.Label,
            "config": {
                "text": text,
                "padx": 10,
                "justify": Tkinter.LEFT,
            },
            "pack": {
                "type": "grid",
                "args": {
                    "row": row,
                    "column": column,
                    "columnspan": columnspan,
                    "sticky": Tkinter.W,
                    "padx": 3,
                    "pady": 3
                }
            }
        }

    @staticmethod
    def define_entry_double(width, row, column, default=0.0):
        return {
            "widget": Tkinter.Entry,
            "config": {
                "width": width
            },
            "pack": {
                "type": "grid",
                "args": {"row": row, "column": column, "sticky": Tkinter.EW, "padx": 3, "pady": 3}
            },
            "variable_key": "textvariable",
            "variable_default": default,
            "variable": Tkinter.DoubleVar,
            "validate": "key",
            "validate_function": "validate_double"
        }

    @staticmethod
    def define_entry_int(width, row, column, default=0):
        return {
            "widget": Tkinter.Entry,
            "config": {
                "width": width
            },
            "pack": {
                "type": "grid",
                "args": {"row": row, "column": column, "sticky": Tkinter.EW, "padx": 3, "pady": 3}
            },
            "variable_key": "textvariable",
            "variable": Tkinter.IntVar,
            "variable_default": default,
            "validate": "key",
            "validate_function": "validate_int"
        }

    @staticmethod
    def define_checkbox(text, row, column, columnspan=1):
        return {
            "widget": Tkinter.Checkbutton,
            "config": {
                "text": text,
                "padx": 10,
                "justify": Tkinter.LEFT,
            },
            "variable_key": "variable",
            "variable": Tkinter.BooleanVar,
            "variable_default": 0,
            "pack": {
                "type": "grid",
                "args": {
                    "row": row,
                    "column": column,
                    "columnspan": columnspan,
                    "sticky": Tkinter.W,
                    "padx": 3,
                    "pady": 3
                }
            }
        }

    def create_layout(self):
        image_frame = self.add_widget(data={
            "widget": Tkinter.Frame,
            "pack": {
                "type": "grid",
                "args":
                    {
                        "row": 0,
                        "column": 0,
                        "sticky": Tkinter.N
                    }
            },
        })

        self.image_width, self.image_height = self.src_image.size
        r1 = self.image_width / 550.
        r2 = self.image_height / 550.
        nw = int(self.image_width / max(r1, r2))
        nh = int(self.image_height / max(r1, r2))
        self.img_aspect_ratio = float(self.image_width) / float(self.image_height)

        self.src_image = self.src_image.resize((nw, nh), Image.ANTIALIAS)
        ui_image = ImageTk.PhotoImage(image=self.src_image, master=self.top)
        label = self.add_widget(name="image", root=image_frame, data={
            "widget": Tkinter.Label,
            "config": {
                "text": "Image size: {width} x {height} pixels".format(width=self.image_width, height=self.image_height),
                "padx": 10,
                "justify": Tkinter.LEFT,
                "compound": Tkinter.TOP,
                "image": ui_image,
            },
            "pack": {
                "type": "grid",
                "args": {
                    "row": 0,
                    "column": 0,
                    "stick": Tkinter.NSEW,
                }
            },
        })
        label.image = ui_image

        controls_frame = self.add_widget(data={
            "widget": Tkinter.Frame,
            "pack": {
                "type": "grid",
                "args": {
                    "row": 0,
                    "column": 1,
                    "sticky": Tkinter.N
                }
            },
        })
        row = 0

        self.add_widget(name="pwm", data=self.define_checkbox("Use PWM mode", row=row, column=0, columnspan=2),
                        root=controls_frame)
        row += 1

        self.add_widget(data=self.define_label("Picture Mode:", row=row, column=0),
                        root=controls_frame)
        var = Tkinter.StringVar(self.top)
        var.set("Grayscale")
        mode_ctl = Tkinter.OptionMenu(controls_frame, var, "Grayscale", "B&W", "B&W Dither")
        mode_ctl.grid(row=row, column=1)
        self.widgets['mode'] = mode_ctl
        self.variables['mode'] = var
        row += 1

        self.add_widget(name="not_resize",
                        data=self.define_checkbox("Don't resize picture", row=row, column=0, columnspan=2),
                        root=controls_frame)
        row += 1

        self.add_widget(name="keep_ar",
                        data=self.define_checkbox("Keep aspect ratio", row=row, column=0, columnspan=2),
                        root=controls_frame)
        row += 1

        self.add_widget(name="width_l", data=self.define_label("Picture Width (mm):", row=row, column=0),
                        root=controls_frame)
        self.add_widget(name="width", data=self.define_entry_double(10, row=row, column=1,
                                                                    default=float(self.image_width)),
                        root=controls_frame)
        row += 1

        self.add_widget(name="height_l", data=self.define_label("Picture Height (mm):", row=row, column=0),
                        root=controls_frame)
        self.add_widget(name="height", data=self.define_entry_double(10, row=row, column=1,
                                                                     default=float(self.image_height)),
                        root=controls_frame)
        row += 1

        self.add_widget(data=self.define_label("Point size (mm):", row=row, column=0),
                        root=controls_frame)
        self.add_widget(name="point_size", data=self.define_entry_double(10, row=row, column=1, default=0.1),
                        root=controls_frame)
        row += 1

        self.add_widget(data=self.define_label("Feed Rate (mm per minute):", row=row, column=0),
                        root=controls_frame)
        self.add_widget(name="feed_rate", data=self.define_entry_int(10, row=row, column=1, default=1000),
                        root=controls_frame)
        row += 1

        self.add_widget(data=self.define_label("Minimum DC Value (0-1000):", row=row, column=0),
                        root=controls_frame)
        self.add_widget(name="dc_min", data=self.define_entry_int(10, row=row, column=1, default=0),
                        root=controls_frame)
        row += 1

        self.add_widget(data=self.define_label("Maximum DC Value (0-1000):", row=row, column=0),
                        root=controls_frame)
        self.add_widget(name="dc_max", data=self.define_entry_int(10, row=row, column=1, default=1000),
                        root=controls_frame)
        row += 1

        self.add_widget(data=self.define_label("Acceleration margins (mm):", row=row, column=0),
                        root=controls_frame)
        self.add_widget(name="margins", data=self.define_entry_double(10, row=row, column=1, default=float(10)),
                        root=controls_frame)
        row += 1

        self.add_widget(data=self.define_label("Image contrast", row=row, column=0),
                        root=controls_frame)
        self.add_widget(root=controls_frame, data={
            "widget": Tkinter.Button,
            "config": {
                "text": "reset",
                "command": self.reset_contrast,
                "width": 8,
            },
            "pack": {
                "type": "grid",
                "args": {
                    "row": row,
                    "column": 1,
                    "stick": Tkinter.NSEW,
                }
            }
        })
        row += 1
        self.add_widget(name="contrast", root=controls_frame, data={
            "widget": Tkinter.Scale,
            "config": {
                "orient": Tkinter.HORIZONTAL,
                "from": -255,
                "to": 255,
                "showvalue": True
            },
            "variable_key": "variable",
            "variable": Tkinter.IntVar,
            "variable_default": 0,
            "pack": {
                "type": "grid",
                "args": {
                    "row": row,
                    "column": 0,
                    "columnspan": 2,
                    "stick": Tkinter.NSEW,
                }
            },
        })
        row += 1

        self.add_widget(data=self.define_label("Image brightness", row=row, column=0, columnspan=2),
                        root=controls_frame)
        self.add_widget(root=controls_frame, data={
            "widget": Tkinter.Button,
            "config": {
                "text": "reset",
                "command": self.reset_brightness,
                "width": 8,
            },
            "pack": {
                "type": "grid",
                "args": {
                    "row": row,
                    "column": 1,
                    "stick": Tkinter.NSEW,
                }
            }
        })
        row += 1
        self.add_widget(name="brightness", root=controls_frame, data={
            "widget": Tkinter.Scale,
            "config": {
                "orient": Tkinter.HORIZONTAL,
                "from": -100,
                "to": 100,
                "showvalue": True
            },
            "variable_key": "variable",
            "variable": Tkinter.IntVar,
            "variable_default": 0,
            "pack": {
                "type": "grid",
                "args": {
                    "row": row,
                    "column": 0,
                    "columnspan": 2,
                    "stick": Tkinter.NSEW,
                }
            },
        })
        row += 1

        frame = self.add_widget(data={
            "widget": Tkinter.Frame,
            "pack": {
                "type": "grid",
                "args": {"row": row,
                         "column": 0,
                         "columnspan": 2,
                         "stick": Tkinter.NSEW,
                         }
            },
        })
        row += 1

        self.add_widget(root=frame, data={
            "widget": Tkinter.Button,
            "config": {
                "text": "OK",
                "command": self.on_ok,
                "width": 8,
                "padx": 5,
                "pady": 5
            },
            "pack": {
                "type": "pack",
                "args": {"side": Tkinter.RIGHT, "padx": 3, "pady": 3}
            },
        })

        self.add_widget(root=frame, data={
            "widget": Tkinter.Button,
            "config": {
                "text": "Cancel",
                "command": self.on_cancel,
                "width": 8,
                "padx": 5,
                "pady": 5
            },
            "pack": {
                "type": "pack",
                "args": {"side": Tkinter.RIGHT, "padx": 3, "pady": 3}
            },
        })

    def mainloop(self):
        self._setup_traces()
        self.trace_resize()
        self.trace_width()
        self.trace_image()
        return UI.mainloop(self)


def change_contrast(img, level):
    factor = (259.0 * (level + 255.0)) / (255.0 * (259.0 - level))

    def contrast(c):
        value = int(128.0 + factor * (c - 128.0))
        return max(0, min(255, value))

    return img.point(contrast)


def ui(image):
    ui_obj = RasterToGcodeUI(image)
    ui_obj.load_values("raster2gcode.cfg")
    if ui_obj.mainloop():
        ui_obj.save_values("raster2gcode.cfg")
        return ui_obj.get_values()
    return None


def main():
    if len(sys.argv) > 1:
        im_name = sys.argv[1]
    else:
        im_name = tkFileDialog.askopenfilename(defaultextension=".png",
                                               filetypes=(
                                                   ("Depth images", ".gif .png .jpg"),
                                                   ("All files", "*")))
        if not im_name:
            raise SystemExit
        Tkinter._default_root.destroy()
        Tkinter._default_root = None
    image = Image.open(im_name)
    image = image.convert("L")  # grayscale
    options = ui(image)
    if options is not None:
        if not options['not_resize']:
            new_width = int(float(options['width']) / float(options['point_size']))
            new_height = int(float(options['height']) / float(options['point_size']))
            im = image.resize((new_width, new_height), Image.ANTIALIAS)
        else:
            im = image
        im = enhance_image(im, options['contrast'], options['brightness'], options['pwm'], options['mode'])
        convert(im, options['point_size'], options['feed_rate'], options['margins'], options['pwm'], options['dc_min'],
                options['dc_max'])
    else:
        exit(1)


if __name__ == '__main__':
    main()
